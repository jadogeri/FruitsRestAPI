openapi: 3.0.3
info:
  title: Fruits Rest API .0
  description: |-
    This is a sample client User Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the client user, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of clientuser, then click [here](https://editor.swagger.io/?url=https://clientuser.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load clientuser OAS 2.0` menu option!_
    
    Some useful links:
    - [The Fruits repository](https://github.com/jadogeri/FruitsRestAPI)
    - [The source API definition for the Fruits API](https://github.com/jadogeri/FruitsRestAPI/blob/main/openapi.yml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://fruitsrestapi.onrender.com
tags:
  - name: client
    description: Everything about your client
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: user
    description: Access to clientuser orders
    externalDocs:
      description: Find out more about our user
      url: http://swagger.io
  - name: fruit
    description: Operations about fruit
paths:
  /client:
    put:
      tags:
        - client
      summary: Update an existing client
      description: Update an existing client by Id
      operationId: updateclient
      requestBody:
        description: Update an existent client in the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
          application/xml:
            schema:
              $ref: '#/components/schemas/Client'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Client'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          description: Invalid ID supplied
        '404':
          description: client not found
        '422':
          description: Validation exception
      security:
        - clientuser_auth:
            - write:clients
            - read:clients
    post:
      tags:
        - client
      summary: Add a new client to the user
      description: Add a new client to the user
      operationId: addclient
      requestBody:
        description: Create a new client in the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
          application/xml:
            schema:
              $ref: '#/components/schemas/Client'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Client'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - clientuser_auth:
            - write:clients
            - read:clients
  /client/findByStatus:
    get:
      tags:
        - client
      summary: Finds clients by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findclientsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        '400':
          description: Invalid status value
      security:
        - clientuser_auth:
            - write:clients
            - read:clients
  /client/findByTags:
    get:
      tags:
        - client
      summary: Finds clients by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findclientsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        '400':
          description: Invalid tag value
      security:
        - clientuser_auth:
            - write:clients
            - read:clients
  /client/{clientId}:
    get:
      tags:
        - client
      summary: Find client by ID
      description: Returns a single client
      operationId: getclientById
      parameters:
        - name: clientId
          in: path
          description: ID of client to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          description: Invalid ID supplied
        '404':
          description: client not found
      security:
        - api_key: []
        - clientuser_auth:
            - write:clients
            - read:clients
    post:
      tags:
        - client
      summary: Updates a client in the user with form data
      description: ''
      operationId: updateclientWithForm
      parameters:
        - name: clientId
          in: path
          description: ID of client that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of client that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of client that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
      security:
        - clientuser_auth:
            - write:clients
            - read:clients
    delete:
      tags:
        - client
      summary: Deletes a client
      description: delete a client
      operationId: deleteclient
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: clientId
          in: path
          description: client id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid client value
      security:
        - clientuser_auth:
            - write:clients
            - read:clients
  /client/{clientId}/uploadImage:
    post:
      tags:
        - client
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: clientId
          in: path
          description: ID of client to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - clientuser_auth:
            - write:clients
            - read:clients
  /user/inventory:
    get:
      tags:
        - user
      summary: Returns client inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /user/order:
    post:
      tags:
        - user
      summary: Place an order for a client
      description: Place a new order in the user
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /user/order/{orderId}:
    get:
      tags:
        - user
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - user
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /fruit:
    post:
      tags:
        - fruit
      summary: Create fruit
      description: This can only be done by the logged in fruit.
      operationId: createFruit
      requestBody:
        description: Created fruit object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fruit'
          application/xml:
            schema:
              $ref: '#/components/schemas/Fruit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Fruit'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fruit'
            application/xml:
              schema:
                $ref: '#/components/schemas/Fruit'
  /fruit/createWithList:
    post:
      tags:
        - fruit
      summary: Creates list of fruits with given input array
      description: Creates list of fruits with given input array
      operationId: createFruitsWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Fruit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fruit'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Fruit'
        default:
          description: successful operation
  /fruit/login:
    get:
      tags:
        - fruit
      summary: Logs fruit into the system
      description: ''
      operationId: loginFruit
      parameters:
        - name: fruitname
          in: query
          description: The fruit name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the fruit
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid fruitname/password supplied
  /fruit/logout:
    get:
      tags:
        - fruit
      summary: Logs out current logged in fruit session
      description: ''
      operationId: logoutFruit
      parameters: []
      responses:
        default:
          description: successful operation
  /fruit/{fruitname}:
    get:
      tags:
        - fruit
      summary: Get fruit by fruit name
      description: ''
      operationId: getFruitByName
      parameters:
        - name: fruitname
          in: path
          description: 'The name that needs to be fetched. Use fruit1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fruit'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Fruit'
        '400':
          description: Invalid fruitname supplied
        '404':
          description: Fruit not found
    put:
      tags:
        - fruit
      summary: Update fruit
      description: This can only be done by the logged in fruit.
      operationId: updateFruit
      parameters:
        - name: fruitname
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent fruit in the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fruit'
          application/xml:
            schema:
              $ref: '#/components/schemas/Fruit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Fruit'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - fruit
      summary: Delete fruit
      description: This can only be done by the logged in fruit.
      operationId: deleteFruit
      parameters:
        - name: fruitname
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid fruitname supplied
        '404':
          description: Fruit not found
components:
  schemas:
    
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        fruitname:
          type: string
          example: theFruit
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        fruitStatus:
          type: integer
          description: Fruit Status
          format: int32
          example: 1
      xml:
        name: fruit
    
    Fruit:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        fruitname:
          type: string
          example: theFruit
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        fruitStatus:
          type: integer
          description: Fruit Status
          format: int32
          example: 1
      xml:
        name: fruit
 
    Client:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/User'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
     
         
        status:
          type: string
          description: client status in the user
          enum:
            - available
            - pending
            - sold
      xml:
        name: client
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    client:
      description: client object that needs to be added to the user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Client'
        application/xml:
          schema:
            $ref: '#/components/schemas/Client'
    FruitArray:
      description: List of fruit object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Fruit'
  securitySchemes:
    clientuser_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://clientuser3.swagger.io/oauth/authorize
          scopes:
            write:clients: modify clients in your account
            read:clients: read your clients
    api_key:
      type: apiKey
      name: api_key
      in: header
